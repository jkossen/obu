#!/bin/sh
#
# Current version: 1.8 (2011-05-04)
#
# obu, an OpenBSD binary upgrade script. Trying to be handy for
# tracking -current snapshots.
#
# Copyright (c) 2004-2011 by Jochem Kossen <jochem@jkossen.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Forked way back (I doubt there's any line of code from then left :-)) from
# OpenBSD-binary-upgrade.sh by Han Boetes:
#
#
#   Id: OpenBSD-binary-upgrade.sh,v 1.7 2003/07/28 23:26:39 han Exp
#   Copyright 2003 by Han Boetes <han@mijncomputer.nl>
#   This script is released under the terms of the BSD-license
#

#######################################################################
# default configuration, use configuration file to override these
#
# version of files to download
VERSION='49'
#
# install new bootblocks? (i386 specific)
NEW_BOOTBLOCKS="no"
BOOTDISK='ad0'
#
# directory locations
DOWNLOADDIR='/usr/snapshot'
TARGETROOT='/'
TMPROOT='/var/tmp/temproot'
#
# program locations
PAGER='less'
RSYNC='rsync -L -P --checksum --times'
#
# set to 'sudo' to enable sudo, note that this is not recommended, since sudo
# from the new filesets might not work on the currently running kernel.
SUDO=''
FTP='ftp -V'
#
# Select the packages you want to download (obu update). You need at least bsd,
# etc and base.
DOWNLOAD='bsd bsd.mp bsd.rd base etc man comp game xfont xetc xserv xbase xshare'
#
# Select the packages you want to install (obu upgrade). Note that this also
# determines the order of installation, so put base last in order to prevent
# currently running kernel / library / utility conflicts
INSTALL='bsd bsd.rd xserv xfont xshare xbase game comp man base'
#
# This determines which file will be set to /bsd. If you set it to 'bsd.mp' for
# example, that file will be renamed to bsd.
BSD='bsd'
#
# Select the configuration packages you want to upgrade (obu updatecfg)
ETC='etc xetc'
#
# Set the mirror to the location from where you want to download
MIRROR="ftp://ftp.nluug.nl/pub/OpenBSD/snapshots/$(uname -m)"
#
# Checksums are calculated when downloading, do you want to check them when
# executing 'obu upgrade' as well? You might want to set it to 'no' if you
# download snapshots on one machine and execute upgrade on many machines using
# NFS mounts
CHECKSUM_ON_UPGRADE='yes'
#
# Hooks: these variables mention custom scripts which are executed at the
# specified moment. Multiple scripts can be specified seperated by spaces.
HOOKS_PRE_DOWNLOAD=''
HOOKS_POST_DOWNLOAD=''
HOOKS_PRE_INSTALL=''
HOOKS_POST_INSTALL=''

#######################################################################
# Initialization, don't change.

# Container for the actual filenames (configuration defines sets, not
# filenames)
FILES=""

# Container for filenames which need to be downloaded
NEEDED_FILES=""

# Container for filenames which are already checksummed
CHECKED_FILES=""

# We need two backups of /sbin/reboot to be able to put the backup of the
# backup back in the case obu has been run multiple times for this
# snapshot/release (having /sbin/reboot and /sbin/oreboot being the same files
# does not really help one).
REBOOT="${TARGETROOT}sbin/reboot"
OREBOOT="${TARGETROOT}sbin/oreboot"
OOREBOOT="${TARGETROOT}sbin/ooreboot"

trap abort INT TERM

#######################################################################
# Functions

# show usage instructions
usage()
{
    cat <<EOF

    USAGE:
    obu <update|upgrade|post-reboot|mergecfg|check|bootblocks|full> [file]

    update:         download/update files
    upgrade:        check and install downloaded files, install new bootblocks
    post-reboot:    execute parts of upgrade which might have failed under the
                    old kernel
    mergecfg:       update configuration (sysmerge)
    check:          check downloaded files
    bootblocks:     install new bootblocks (i386 specific)
    full:           all of it

    file:           path to configuration file to use

    Copyright (c) 2004-2011 by Jochem Kossen <jochem@jkossen.nl>
EOF
}

# bail out on errors
abort()
{
    echo ' !!! Aborted.' >&2
    exit 1
}

# end a line started with msg_start by echoing 'FAIL!' indicating the action
# failed. Then, abort.
fail()
{
    echo 'FAIL!'
    abort
}

# mention to the user that the upgrade is done, and suggest a few smart things
# to do
msg_final()
{
    echo
    msg_notice "Done installing files!"
    msg_notice "There are a couple of things to remember:"
    msg_notice ""
    msg_notice "* run obu mergecfg or run sysmerge manually"
    msg_notice "* look at http://www.openbsd.org/faq/current.html to see if you"
    msg_notice "  need to do any manual labour"
    msg_notice "* reboot into the new kernel. If /reboot does not work, use"
    msg_notice "  /oreboot or /ooreboot if it exists."
}

# standardized way of printing errors
msg_error()
{
    echo " !!! ERROR: $*" >&2
}

# standardized way to inform the user an action is started
msg_start()
{
    echo -n " >>> $* ... "
}

# standardized way to inform the user an action started with "msg_start" has
# finished correctly
msg_done()
{
    echo 'done'
}

# standardized way to notify a user
msg_notice()
{
    echo " *** NOTICE: $*"
}

# read configuration
read_config()
{
    if [ ! -z "$1" -a -f "$1" ]; then
	    . "$1"
    elif [ ! -z "$1" ]; then
        msg_error "$1 is not a readable file"
        abort
    else
        [ -r '/etc/oburc' ] && . '/etc/oburc' || true
        [ -r "$HOME/.oburc" ] && . "$HOME/.oburc" || true
    fi
}

# The DOWNLOAD and INSTALL configuration variables contain set names (without
# the version and extension). This function converts them into filenames
sets_to_filenames()
{
    for FILE in $DOWNLOAD; do
        case $FILE in
            bsd|bsd.rd|bsd.mp)
                FILES="$FILES $FILE"
                ;;
            *)
                FILES="$FILES $FILE$VERSION.tgz"
                ;;
        esac
    done
}

# By checksumming the existing files against the SUMFILE, determine which files
# need to be downloaded
determine_needed_files()
{
    for FILE in $FILES; do
        msg_start "Checksumming $FILE to determine if it needs to be downloaded: "
        check_sum_file $FILE >/dev/null 2>&1
        if [ "$?" != "0" ]; then
            echo "yes"
            NEEDED_FILES="$NEEDED_FILES $FILE"
        else
            echo "no"
            CHECKED_FILES="$CHECKED_FILES $FILE"
        fi
    done
}

# Download the latest snapshot files
download_files()
{
    DFUN="download_file_file"

    if [ ! -d "$DOWNLOADDIR" ]; then
        mkdir -p "$DOWNLOADDIR" || fail
    fi

    cd "$DOWNLOADDIR" || fail

    if [ ${MIRROR#file://} != $MIRROR ]; then
        DFUN="download_file_file"
    elif [ ${MIRROR#rsync://} != $MIRROR ]; then
        DFUN="download_file_rsync"
    elif [ ${MIRROR#ftp://} != $MIRROR ]; then
        DFUN="download_file_ftp"
    elif [ ${MIRROR#http://} != $MIRROR ]; then
        DFUN="download_file_ftp"
    else
        msg_error "download method not supported"
        abort
    fi

    # First download checksum file
    msg_start "Fetching SHA256 from $MIRROR:"
    $DFUN SHA256 || fail
    msg_done

    # Use checksum file to see which files are outdated/corrupt and need to be
    # downloaded
    determine_needed_files

    if [ "$NEEDED_FILES" = "" ]; then
        msg_notice "No new files found at $MIRROR"
    else
        for FILE in $NEEDED_FILES; do
            $DFUN $FILE || fail
            check_sum_file $FILE

            [ "$?" = "1" ] && abort

            # check done, put FILE in $CHECKED_FILES
            CHECKED_FILES="$CHECKED_FILES $FILE"
        done
    fi
}

# Create a backup of the reboot(1) command, since the new one from baseXX.tgz
# might not work on the currently running kernel
backup_reboot()
{
    if [ -f "$OREBOOT" ]; then
        SUM1=$(sha256 -q "$REBOOT")
        SUM2=$(sha256 -q "$OREBOOT")

        if [ "$SUM1" != "$SUM2" ]; then
            msg_start "Backing up $OREBOOT to $OOREBOOT"
            $SUDO cp -pf "$OREBOOT" "$OOREBOOT" || fail
            msg_done

            msg_start "Backing up $REBOOT to $OREBOOT"
            $SUDO cp -pf "$REBOOT" "$OREBOOT" || fail
            msg_done
        else
            msg_notice "$REBOOT and $OREBOOT are the same. Skipping backup"
        fi
    fi
}

# We checksum the existing reboot and oreboot files. obu might have run
# multiple times without rebooting.
check_reboot_backup()
{
    if [ -f "${OREBOOT}" ]; then
        SUM1=$(sha256 -q "$REBOOT")
        SUM2=$(sha256 -q "$OREBOOT")
        if [ "$SUM1" = "$SUM2" ]; then
            msg_notice "$REBOOT and $OREBOOT are the same."
            if [ -f "$OOREBOOT" ]; then
                msg_start "Moving back $OOREBOOT to $OREBOOT"
                $SUDO mv -f "$OOREBOOT" "$OREBOOT" || fail
                msg_done
            else
                msg_notice "$OOREBOOT does not exist. Unable to place back $OOREBOOT to $OREBOOT"
            fi
        fi
    fi
}

# Download a file from a local directory (or network mount)
download_file_file()
{
    cp -fp "${MIRROR#file://}/$1" "$DOWNLOADDIR/$1"
}

# Download a file through FTP
download_file_ftp()
{
    echo
    $FTP "$MIRROR/$1" -o "$DOWNLOADDIR/$1"
}

# Download a file through rsync
download_file_rsync()
{
    $RSYNC "$MIRROR/$1" "$DOWNLOADDIR/$1"
}

# Check if the checksum of the downloaded file is correct
check_sum_file()
{
    msg_start "Comparing checksum for $1"
    SUM_SHOULDBE=$(grep \($1\) "$DOWNLOADDIR/SHA256" | awk '{print $NF}')

    if [ ! -f "$DOWNLOADDIR/$1" ]; then
         msg_error "No such file: $1"
         return 1
    fi

    if [ -z "$SUM_SHOULDBE" ]; then
        # no checksum known
        echo "UNKNOWN"
        return 2
    else
        SUM_IS=$(sha256 -q "$DOWNLOADDIR/$1")
        if [ "$SUM_IS" = "$SUM_SHOULDBE" ]; then
            echo "OK"
            return 0
        else
            echo "MISMATCH"
            return 1
        fi
    fi
}

# check all downloaded files against the sums in SHA256
check_sum_all()
{
    CHECK_FILES=""
    RET=0

    # only checksum file if it wasn't already checked
    for FILE in $FILES; do
        NEED_CHECK=1
        for CHECKED_FILE in $CHECKED_FILES; do
            [ "$FILE" = "$CHECKED_FILE" ] && NEED_CHECK=0
        done

        if [ "$NEED_CHECK" = 1 ]; then
            check_sum_file "$FILE"
            [ "$?" != "0" ] && RET=1
        fi
    done

    return $RET
}

# install given kernel file into given target file. Creates a backup .old file
# first.
#
# from faq/upgrade49.html: Note the extra steps for copying over the primary
# kernel: those are done to ensure that there is always a valid copy of the
# kernel on the disk that the system can boot from should there be a really
# badly timed power outage or system crash.
install_kernel_file()
{
    FILE="$1"
    TRG="$2"

    msg_start "Installing kernel file $FILE"

    if [ -e "$TRG" ]; then
        if [ -e "${TRG}.old" ]; then
            $SUDO rm -f "${TRG}.old" || fail
        fi
        $SUDO ln "$TRG" "${TRG}.old" || fail
    fi

    $SUDO cp -f "$DOWNLOADDIR/$FILE" "${TRG}.new" || fail
    $SUDO mv -f "${TRG}.new" "$TRG" || fail

    msg_done
}

# install downloaded files
install_files()
{
    for FILE in $INSTALL; do
        case $FILE in
            bsd)
                TRG="${TARGETROOT}${FILE}"
                if [ "$BSD" != "$FILE" ]; then
                    TRG="${TARGETROOT}bsd.sp"
                fi
                install_kernel_file "$FILE" "$TRG"
                ;;
            bsd.mp)
                TRG="${TARGETROOT}${FILE}"
                if [ "$BSD" = "$FILE" ]; then
                    TRG="${TARGETROOT}bsd"
                fi
                install_kernel_file "$FILE" "$TRG"
                ;;
            bsd.rd)
                TRG="${TARGETROOT}${FILE}"
                install_kernel_file "$FILE" "$TRG"
                ;;
            etc|xetc)
                # dealt with in another function
                ;;
            *)
                msg_start "Installing set $FILE"
                $SUDO tar zxhpf "$DOWNLOADDIR/$FILE$VERSION.tgz" -C "$TARGETROOT" || fail
                msg_done
                ;;
        esac
    done
}

# install new boot blocks (i386 specific)
install_bootblocks()
{
    if [ $NEW_BOOTBLOCKS = "yes" ]; then
        msg_start "Backing up old ${TARGETROOT}boot to ${TARGETROOT}boot.old"
        $SUDO cp -f "${TARGETROOT}boot" "${TARGETROOT}boot.old" || fail
        msg_done

        msg_start "Updating ${TARGETROOT}boot"
        $SUDO cp -f "${TARGETROOT}usr/mdec/boot" "${TARGETROOT}boot" || fail
        msg_done

        msg_start "Installing new bootblocks on $BOOTDISK"
        $SUDO "${TARGETROOT}usr/mdec/installboot" "${TARGETROOT}boot" "${TARGETROOT}usr/mdec/biosboot" $BOOTDISK || fail
        msg_done
    else
        msg_notice "NEW_BOOTBLOCKS disabled. Not installing new MBR."
    fi
}

# use sysmerge to update configuration files
merge_etc()
{
    X="-s"
    for FILE in $ETC; do
        msg_notice "Merging configuration file $FILE$VERSION.tgz"
        if [ "$FILE" = "xetc" ]; then
            X="-x"
        fi
        $SUDO sysmerge $X "$DOWNLOADDIR/$FILE$VERSION.tgz" || fail
    done
}

# Run custom scripts at specific moments
run_hooks()
{
    for HOOK in $*; do
        msg_notice "executing $HOOK"
        "$HOOK" || fail
    done
}

#######################################################################
# run
case $1 in
    bootblocks)
        read_config "$2"
        install_bootblocks
        ;;
    check)
        read_config "$2"
        sets_to_filenames
        check_sum_all
        ;;
    update)
        read_config "$2"
        sets_to_filenames
        run_hooks $HOOKS_PRE_DOWNLOAD
        download_files
        run_hooks $HOOKS_POST_DOWNLOAD
        ;;
    upgrade)
        read_config "$2"
        sets_to_filenames
        if [ "$CHECKSUM_ON_UPGRADE" = "yes" ]; then
            check_sum_all || abort
        fi
        backup_reboot
        run_hooks $HOOKS_PRE_INSTALL
        install_files
        run_hooks $HOOKS_POST_INSTALL
        check_reboot_backup
        install_bootblocks
        msg_final
        ;;
    post-reboot)
        read_config "$2"
        sets_to_filenames
        run_hooks $HOOKS_POST_INSTALL
        check_reboot_backup
        install_bootblocks
        msg_final
        ;;
    mergecfg)
        read_config "$2"
        sets_to_filenames
        merge_etc
        ;;
    full)
        read_config "$2"
        sets_to_filenames
        run_hooks $HOOKS_PRE_DOWNLOAD
        download_files
        run_hooks $HOOKS_POST_DOWNLOAD
        backup_reboot
        run_hooks $HOOKS_PRE_INSTALL
        install_files
        run_hooks $HOOKS_POST_INSTALL
        check_reboot_backup
        install_bootblocks
        merge_etc
        ;;
    *)
        msg_error "unknown option: $1"
        usage
        abort
        ;;
esac
