obu - OpenBSD Binary Upgrade script

Copyright (c) 2004-2011 by Jochem Kossen <jochem@jkossen.nl>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Forked from OpenBSD-binary-upgrade.sh by Han Boetes:
  Id: OpenBSD-binary-upgrade.sh,v 1.7 2003/07/28 23:26:39 han Exp
  Copyright 2003 by Han Boetes <han@mijncomputer.nl>
  This script is released under the terms of the BSD-license

obu is a script for tracking OpenBSD -current snapshots

USAGE:
obu <fetch|upgrade|upgradecfg|check|bootblocks|full> [file]

update:         download/update files
upgrade:        check and install downloaded files, install new bootblocks
post-reboot     execute parts of upgrade which might have failed under the
                old kernel
mergecfg:       update configuration (sysmegrge)
check:          check downloaded files
bootblocks:     install new bootblocks (i386 specific)
full:           update, upgrade, mergecfg and bootblocks

file:           path to configuration file to use (default: /etc/oburc or
                $HOME/.oburc)

FEATURES:

    * Ability to download via either HTTP, FTP, RSYNC or filesystem (eg NFS
      mounts)

    * Creates backup of /reboot to /oreboot, and /oreboot to /ooreboot if they
      differ, so we have a good chance of having a working reboot command

    * Backs up your kernel files (to $kernel.old)

    * Support for running custom scripts at specific moments using hooks.

      Currently available are configuration variables HOOKS_PRE_DOWNLOAD,
      HOOKS_POST_DOWNLOAD, HOOKS_PRE_INSTALL, HOOKS_POST_INSTALL

      These variables can contain paths to multiple scripts seperated by
      spaces.

      Eg: HOOKS_POST_INSTALL="/etc/obu/bsd_disable_mpbios /etc/obu/disable_gcc"

    * Ability to install into a custom root (eg NFS mounts)

    * Ability to disable checksumming on obu upgrade. Comes in handy when
      downloading snapshots on one machine, share them via NFS to many others
      and do obu upgrade there.

    * Verifies if downloaded files are corrupt (by checking SHA256 sums)

    * Only downloads files which do not match the checksum

    * Only installs if all files match their checksums

    * NOT RECOMMENDED: sudo support (only run as root when installing files).
      This might not work because of the new sudo not working on the currently
      running kernel, so it's disabled by default.

    * No dependencies other than rsync if you want to use that

